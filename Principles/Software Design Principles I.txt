Some popular and useful design principles:

1. Don't Repeat Yourself (DRY):
	- The DRY principle is stated as "Every piece of knowledge must have a single, unambiguous,
	  authoritative representation within a system"
	- The way to achieve DRY is by creating functions and classes to make sure that any logic 
	  should be written in only one place.

2. Curly's Law - Do one Thing:
	- Curly's law: A entity (function, variable, class) should mean one thing, and one thing 
	  only. It should not mean two things at once.
	- It is about choosing a single, clearly defined goal for any particular bit of code: Do one thing.

3. Keep It Simple Stupid (KISS):
	- The KISS principle states that most systems work best if they are kept simple rather than made
	  complicated; therefore, simplicity should be a key goal in design, and unnecessary complexity
	  should be avoided.
	- Simple code has benefits like, less time to write, less chances of bugs, easier to understand,
	  debug, and modify.

4. Don't make me think:
	- Code should be easy to understand without much thinking. It it isn't then there is a prospect of
	  simplification.

5. You Aren't Gonna Need It (YAGNI):
	- YAGNI is an Extreme Programming practice which states: Always implement things when you actually
	  need them, never when you just foresee that you need them.
	- This doesn't mean you should avoid building flexibility into your code. It means you shouldn't 
	  overengineer something based on what you think you might need later on.

6. Premature Optimization is the Root of all Evil:
	- We should forget about small efficiencies, say about 97% of the time. Yet we should not pass up 
      opportunities in that critical 3%.
	- This wastes time and generally have a strong negative impact when debugging and maintenance are
	  considered.

7. Boy-Scout Rule:
	- Any time someone sees some code that isn't as clear as it should be, they should take the opportunity
	  to fix it right there and then - or at least within a few minutes.
	- Always leave the code behind in a better state than you found it.

8. Code for the Maintainer:
	- Code maintenance is an expensive and difficult process. Always code considering someone else as the
	  maintainer. After a while you'll understand the code as much as a stranger.

9. Principle of Least Astonishment:
	- It states that a component of a system should behave in a way that most users will expect it to behave.
	- Code should do what the name and comments suggest and conventions should be followed.